version: '3.4'

services:
  config-service:
    image: hub.qinchao.me/microservice/config-service:latest
    deploy:
      # 使用dnsrr方式做负载均衡
      endpoint_mode: dnsrr
      resources:
        limits:
          cpus: '0.2'
          memory: '128M'

  message-service:
    image: hub.qinchao.me/microservice/message-service:latest
    deploy:
      endpoint_mode: dnsrr
      resources:
        limits:
          cpus: '0.2'
          memory: '128M'
    depends_on:
      - config-service

  user-service:
    image: hub.qinchao.me/microservice/user-service:latest
    deploy:
      mode: replicated
      endpoint_mode: dnsrr
      replicas: 3
      resources:
        limits:
          cpus: '0.2'
          memory: '512M'
    depends_on:
      - config-service

  user-edge-service:
    image: hub.qinchao.me/microservice/user-edge-service:latest
    deploy:
      mode: replicated
      endpoint_mode: vip
      replicas: 3
      resources:
        limits:
          cpus: '0.2'
          memory: '512M'
    ports:
      - '8082:8082'
    depends_on:
      - user-service
      - message-service

  course-service:
    image: hub.qinchao.me/microservice/course-service:latest
    deploy:
      mode: replicated
      endpoint_mode: dnsrr
      replicas: 3
      resources:
        limits:
          cpus: '0.2'
          memory: '512M'
    depends_on:
      - user-service

  course-edge-service:
    image: hub.qinchao.me/microservice/course-edge-service:latest
    deploy:
      mode: replicated
      endpoint_mode: vip
      replicas: 3
      resources:
        limits:
          cpus: '0.2'
          memory: '512M'
    ports:
      - '8081:8081'
    depends_on:
      - user-edge-service

  api-gateway-zuul:
    image: hub.qinchao.me/microservice/api-gateway-zuul:latest
    deploy:
      endpoint_mode: vip
      resources:
        limits:
          cpus: '0.2'
          memory: '512M'
    ports:
      - '8080:8080'
    depends_on:
      - config-service
      - user-edge-service
      - course-edge-service

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
    - "8888:8080"
    stop_grace_period: 1m30s
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
   default:
     external:
       name: microservice_overlay

